import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

RUN_STATUS = localenv['clusters']
NUM_SEEDS = localenv['num_seeds']
REUSE_ITERS = 10

nest.add(
    'num_p',
    [10],
    label_func=lambda c: "num_p_%d" % c)

nest.add(
    'init_beta',
    [1],
    label_func=lambda c: "beta_%.2f" % c)

nest.add_aggregate("summary_res_combo_refit", list)
nest.add_aggregate("summary_res_combo_boxed", list)
nest.add_aggregate("summary_res_refit", list)
nest.add_aggregate("summary_res_boxed", list)
nest.add(
    'reuse_test_n',
    [2000],
    label_func=lambda c: "test_%d" % c)

nest.add(
    'seed',
    range(NUM_SEEDS),
    label_func=lambda c: "seed_%d" % c)

@nest.add_target_with_env(localenv)
def generate_data(env, outdir, c):
    cmd = [
        'python generate_data_single_pop.py',
        '--meta-seed 1',
        '--sparse',
        c['num_p'],
        '--p',
        c['num_p'],
        '--init-train-n 300',
        '--train-batch-n 100',
        '--train-incr 1.3',
        '--train-iters',
        REUSE_ITERS,
        '--init-reuse-test-n',
        c['reuse_test_n'],
        '--init-sparse-beta',
        c['init_beta'],
        '--test-n 4000',
	'--out ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'data.pkl'),
            join(outdir, 'log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'model_sim',
    [
        #"online",
        "online_fixed",
    ])

@nest.add_target_with_env(localenv)
def create_modeler(env, outdir, c):
    cmd = [
        'python create_modeler.py',
        '--seed',
	c['seed'],
        '--simulation',
        c['model_sim'],
	'--data ${SOURCES[0]}',
	'--out ${TARGETS[0]}'
    ]
    return env.Command(
        [
            join(outdir, 'model.pkl')],
        c["generate_data"],
        ' '.join(map(str, cmd)))

nest.add(
    'thres',
    [0.41],
    label_func=lambda c: "thres_%.2f" % c)

nest.add(
    'dp_mech',
    [
        "graphical_parallel",
    ])

nest.add(
    'par_ratio',
    [0.2, 0.6, 0.8, 0.9, 1.0],
    label_func=lambda c: "par_ratio_%.1f" % c)

nest.add(
    'loss_to_diff_ratio',
    [10],
    label_func=lambda c: "assum_%d" % c)

@nest.add_target_with_env(localenv)
def create_dp(env, outdir, c):
    cmd = [
        'python create_dp_mechanism.py',
        '--seed',
	c['seed'],
        '--threshold',
        c['thres'],
        '--parallel-ratio',
        c['par_ratio'],
        '--loss-to-diff-ratio',
	c['loss_to_diff_ratio'],
        '--success-weight 0.9',
        '--alpha 0.1',
        '--dp-mech',
        c['dp_mech'],
	'--out ${TARGETS[0]}'
    ]
    return env.Command(
        [
            join(outdir, 'dp_mech.pkl')],
        [],
        ' '.join(map(str, cmd)))

@nest.add_target_with_env(localenv)
def run_experiment(env, outdir, c):
    cmd = [
        'python main.py',
        '--seed',
	c['seed'],
        '--maxfev',
        REUSE_ITERS,
	'--data ${SOURCES[0]}',
	'--model ${SOURCES[1]}',
	'--dp-mech ${SOURCES[2]}',
	'--log ${TARGETS[0]}',
	'--plot ${TARGETS[1]}'
    ]
    return env.Command(
        [
            join(outdir, 'log.txt'),
            join(outdir, 'plot_nll.png'),
        ],
        [
            c["generate_data"][0],
            c["create_modeler"][0],
            c["create_dp"][0],
        ],
        ' '.join(map(str, cmd)))

