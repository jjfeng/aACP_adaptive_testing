import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

CLUSTER_STR = localenv['cluster']
NUM_SEEDS = localenv['num_seeds']
REUSE_ITERS = 20
NUM_P = 50
SPARSE_P = 6
SPARSE_COEF_VAL = 0.75
FWER = 0.1
MTP_MECH_LIST = [
    #"binary_thres_mtp",
    "bonferroni",
    "graphical_bonf",
    "graphical_ffs",
    "graphical_prespec",
]

nest.add(
    'reuse_test_n',
    [800],
    label_func=lambda c: "test_%d" % c)

nest.add(
    'model_sim',
    [
        "online_fixed",
        #"online",
    ])

nest.add(
    'perf_measure',
    ['auc'])

nest.add(
    'power',
    [0.5],
    label_func=lambda c: "power_%d" % int(c * 100))

nest.add(
    'se_factor',
    [0, 1, 1.96],
    label_func=lambda c: "se_factor_%.3f" % c)

@nest.add_target_with_env(localenv)
def create_model_developer(env, outdir, c):
    targets = [
            join(outdir, 'model.pkl')]
    cmd = [
        'python create_model_developer.py',
        '--simulation',
        c['model_sim'],
        '--se-factor',
        c['se_factor'],
        '--power',
        c['power'],
        '--alpha',
        0.1,
        '--model-type',
        'Logistic', # logisticNLL
        '--hypo-tester',
        c['perf_measure'],
        '--min-valid-dat-size',
        30,
        '--out ${TARGETS[0]}'
    ]
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.add_aggregate("mtp_mech_res", dict)
nest.add(
    'mtp_mech',
    MTP_MECH_LIST)

@nest.add_target_with_env(localenv)
def create_mtp(env, outdir, c):
    targets = [join(outdir, 'mtp_mech.pkl')]
    scratch_file = join("simulation_improve", outdir, "scratch.txt")
    cmd = [
        'python create_mtp_mechanism.py',
        '--prespec-ratio 0.6' if "graphical_prespec" == c['mtp_mech'] else '',
        '--success-weight 0.8' if "graphical" in c['mtp_mech'] else '',
        '--alpha',
        FWER,
        '--hypo-tester',
        c['perf_measure'],
        '--mtp-mech',
        c['mtp_mech'],
	    '--scratch %s' % scratch_file if c['mtp_mech'] in ["graphical_prespec", "graphical_ffs"] else '',
	    '--out ${TARGETS[0]}'
    ]
    c['mtp_mech_res'][c['mtp_mech']] = targets[0]
    return env.Command(
        targets,
        [],
        ' '.join(map(str, cmd)))

nest.pop('mtp_mech')

nest.add_aggregate("summary_res", list)
nest.add(
    'seed',
    range(NUM_SEEDS),
    label_func=lambda c: "seed_%d" % c)

@nest.add_target_with_env(localenv)
def generate_data(env, outdir, c):
    cmd = [
        'python run_script.py',
        CLUSTER_STR,
        '${TARGETS[0]}',
        'generate_data.py',
        '--meta-seed 1',
        '--data-seed',
        c['seed'],
        '--sparse-p',
        SPARSE_P,
        '--p',
        NUM_P,
        '--init-train-n 50',
        '--train-batch-n 5',
        '--num-batches',
        REUSE_ITERS * 30,
        '--reuse-test-n',
        c['reuse_test_n'],
        '--sparse-beta',
        SPARSE_COEF_VAL,
        '--test-n 4000',
	'--out ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}',
    ]
    if c['model_sim'] == 'online':
        cmd += [
            '--perturb-beta',
            PERTURB_FACTOR]
    return env.Command(
        [
            join(outdir, 'data.pkl'),
            join(outdir, 'data_log.txt')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'mtp_mech',
    MTP_MECH_LIST)

@nest.add_target_with_env(localenv)
def run_experiment(env, outdir, c):
    cmd = [
        'python run_script.py',
        CLUSTER_STR,
        '${TARGETS[0]}',
        'main.py',
        '--seed',
	c['seed'],
        '--max-iter',
        REUSE_ITERS,
	'--data ${SOURCES[0]}',
	'--model ${SOURCES[1]}',
	'--mtp-mech',
    "simulation_improve/%s" % c['mtp_mech_res'][c['mtp_mech']],
	'--log ${TARGETS[0]}',
	'--out-csv ${TARGETS[1]}',
    ]
    targets = [
            join(outdir, 'log.txt'),
            join(outdir, 'res.csv'),
        ]
    c['summary_res'].append(targets[1])
    return env.Command(
        targets,
        [
            c["generate_data"][0],
            c["create_model_developer"][0],
            c["mtp_mech_res"][c['mtp_mech']],
        ],
        ' '.join(map(str, cmd)))

nest.pop("seed")

@nest.add_target_with_env(localenv)
def plot_avg(env, outdir, c):
    cmd = [
        'python plot_simulation_improve.py',
	'--results',
        ",".join(["simulation_improve/%s" % r for r in c['summary_res']]),
	'--plot-file ${TARGETS[0]}',
    ]
    return env.Command(
        [
            join(outdir, 'res_summary.png'),
        ],
        c["summary_res"],
        ' '.join(map(str, cmd)))
