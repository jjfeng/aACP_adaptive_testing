import os

from os.path import join
from nestly.scons import SConsWrap
from nestly import Nest
from SCons.Script import Environment, Command, AddOption

Import('env')
localenv = env.Clone()

# Set up state
nest = SConsWrap(Nest(), localenv['output'], alias_environment=localenv)

RUN_STATUS = localenv['clusters']
NUM_SEEDS = localenv['num_seeds']
REUSE_ITERS = 10
RATIO_LIST = [100,6,7,7,8,8,8,8,8,9,9,10,10,10]
RATIO_LIST = [10] * REUSE_ITERS
#RATIO_LIST = [100,4,4,4,5,5,5,5,5,5,6,7,8,9,10,10]
FWER = 0.1

nest.add(
    'num_p',
    [10],
    label_func=lambda c: "num_p_%d" % c)

nest.add(
    'init_beta',
    [1],
    label_func=lambda c: "beta_%.2f" % c)

nest.add(
    'fwer',
    [
        0.1,
        #0.05
    ],
    label_func=lambda c: "fwer_%.3f" % c)

nest.add(
    'reuse_test_n',
    [1500],
    label_func=lambda c: "test_%d" % c)

nest.add(
    'model_sim',
    [
        #"neldermead",
        "online",
        #"online_fixed",
    ])

@nest.add_target_with_env(localenv)
def create_modeler(env, outdir, c):
    cmd = [
        'python create_modeler.py',
        '--simulation',
        c['model_sim'],
	'--out ${TARGETS[0]}'
    ]
    return env.Command(
        [
            join(outdir, 'model.pkl')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'dp_mech',
    [
        #"no_dp",
        #"binary_thres_dp",
        "bonferroni",
        #"bonferroni_nonadapt",
        "graphical_bonf",
        "graphical_ffs",
        "graphical_parallel",
    ])

@nest.add_target_with_env(localenv)
def create_dp(env, outdir, c):
    targets = [join(outdir, 'dp_mech.pkl')]
    scratch_file = join("simulation_reuse", outdir, "scratch.txt")
    ratio_str = ",".join(map(str, RATIO_LIST))
    cmd = [
        'python create_dp_mechanism.py',
        #'--threshold',
        #c['thres'],
        '--parallel-ratio 0.6' if "parallel" in c['dp_mech'] else '',
        '--loss-to-diff-ratio %s' % ratio_str if "parallel" in c['dp_mech'] else '',
        '--success-weight 0.6' if "graphical" in c['dp_mech'] else '',
        '--alpha',
        FWER,
        '--dp-mech',
        c['dp_mech'],
	'--scratch',
        scratch_file,
	'--out ${TARGETS[0]}'
    ]
    return env.Command(
        [
            join(outdir, 'dp_mech.pkl')],
        [],
        ' '.join(map(str, cmd)))

nest.add(
    'seed',
    range(NUM_SEEDS),
    label_func=lambda c: "seed_%d" % c)

@nest.add_target_with_env(localenv)
def generate_data(env, outdir, c):
    cmd = [
        'python generate_data_single_pop.py',
        '--meta-seed',
        c['seed'],
        '--sparse',
        c['num_p'],
        '--p',
        c['num_p'],
        '--init-train-n 500',
        '--train-batch-n 200',
        '--train-incr 1',
        '--train-iters',
        20*REUSE_ITERS,
        '--init-reuse-test-n',
        c['reuse_test_n'],
        '--init-sparse-beta',
        c['init_beta'],
        '--test-n 4000',
	'--out ${TARGETS[0]}',
	'--log-file ${TARGETS[1]}',
    ]
    return env.Command(
        [
            join(outdir, 'data.pkl'),
            join(outdir, 'data_log.txt')],
        [],
        ' '.join(map(str, cmd)))


@nest.add_target_with_env(localenv)
def run_experiment(env, outdir, c):
    cmd = [
        'python main.py',
        '--seed',
	c['seed'],
        '--max-iter',
        REUSE_ITERS,
	'--data ${SOURCES[0]}',
	'--model ${SOURCES[1]}',
	'--dp-mech ${SOURCES[2]}',
	'--log ${TARGETS[0]}',
	'--plot ${TARGETS[1]}'
    ]
    return env.Command(
        [
            join(outdir, 'log.txt'),
            join(outdir, 'plot_nll.png'),
        ],
        [
            c["generate_data"][0],
            c["create_modeler"][0],
            c["create_dp"][0],
        ],
        ' '.join(map(str, cmd)))

